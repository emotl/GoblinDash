<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>goblin</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.4;
grav_multiplier = 3.0;
maxFallSpeed = 15;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;
maxHorizontalSpeed = 8;
wallJumpHorizontalSpeed = 10;
horizontal_friction = 2;
spring_multiplier = 2;
lastFlagX = x;
lastFlagY = y;

if(global.flag_order_1 == 1){
    x = obj_flag_1.x
    y = obj_flag_1.y
}
else if(global.flag_order_2 == 1){
    x = obj_flag_2.x
    y = obj_flag_2.y
}
else if(global.flag_order_3 == 1){
    x = obj_flag_3.x
    y = obj_flag_3.y
}
else if(global.flag_order_4 == 1){
    x = obj_flag_4.x
    y = obj_flag_4.y
}
else if(global.flag_order_5 == 1){
    x = obj_flag_5.x
    y = obj_flag_5.y
}
else if(global.flag_order_6 == 1){
    x = obj_flag_6.x
    y = obj_flag_6.y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_jump_end = keyboard_check_released(vk_space);
kill_button_pressed = keyboard_check_pressed(ord('Q')); 

//React to inputs
move = key_left + key_right;
hsp += move * movespeed;
hsp -= sign(hsp) * horizontal_friction;

// Hard horizontal speed cap
if (hsp * sign(hsp) &gt; maxHorizontalSpeed) hsp = maxHorizontalSpeed * sign(hsp);


// Vsp is vertical speed, which is positive going down.
if (vsp &lt; maxFallSpeed) 
{
    vsp += grav;
}


// If on spring block
if (place_meeting(x,y,Spring_Block))
{
    vsp = -1 * jumpspeed * spring_multiplier;
    audio_play_sound(SpringSound,1,false);
}

// If on Spikes or something that we want to kill us
if (place_meeting(x,y,Spike_Up) or place_meeting(x,y,Spike_Down) or place_meeting(x,y,Spike_Left) or place_meeting(x,y,Spike_Right) or kill_button_pressed)
{
    // Set Death Animation
    //sprite_index = Some type of death sprite

    // Move the Player back to the starting point
    x = self.lastFlagX;
    y = self.lastFlagY;
    
}

// If touching Flag 1
if (place_meeting(x,y,obj_flag_1) and self.lastFlagX != other.x and self.lastFlagY != other.y){
    self.lastFlagX = other.x;
    self.lastFlagY = other.y;
}
// If touching Flag 2
if (place_meeting(x,y,obj_flag_2) and self.lastFlagX != other.x and self.lastFlagY != other.y){
    self.lastFlagX = other.x;
    self.lastFlagY = other.y;
}
// If touching Flag 3
if (place_meeting(x,y,obj_flag_3) and self.lastFlagX != other.x and self.lastFlagY != other.y){
    self.lastFlagX = other.x;
    self.lastFlagY = other.y;
}
// If touching Flag 4
if (place_meeting(x,y,obj_flag_4) and self.lastFlagX != other.x and self.lastFlagY != other.y){
    self.lastFlagX = other.x;
    self.lastFlagY = other.y;
}
// If touching Flag 5
if (place_meeting(x,y,obj_flag_5) and self.lastFlagX != other.x and self.lastFlagY != other.y){
    self.lastFlagX = other.x;
    self.lastFlagY = other.y;
}
// If touching Flag 6
if (place_meeting(x,y,obj_flag_6) and self.lastFlagX != other.x and self.lastFlagY != other.y){
    self.lastFlagX = other.x;
    self.lastFlagY = other.y;
}



// Standing on ground
if (place_meeting(x,y+1,obj_wall))
{
    vsp = key_jump * -jumpspeed
}

// Let go of jump key in the air, immediately start to fall
if (key_jump_end and !vsp) {
    vsp = 0
}


//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    
    // Wall jump
    if( key_jump and !place_meeting(x,y+1,obj_wall)) {
        hsp = -1 * sign(hsp) * wallJumpHorizontalSpeed;
        vsp = -jumpspeed;
    }
    else hsp = 0;
}
x += hsp;
 
//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while((!place_meeting(x,y+sign(vsp),obj_wall)))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(view_current == 0){
    draw_self();
}
else if(view_current == 1){
    draw_sprite(green_map,0,x-128,y-128)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>221</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>541</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>goblin_run_R</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>.25</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>541</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>goblin_run_L</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>.25</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>541</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>goblin_R</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>541</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>goblin_L</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
